using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using System;

namespace Megumin
{
    /// <summary>
    /// 代码生成器
    /// </summary>
    public abstract class CodeGenerator
    {
        [Serializable]
        public class Mecro
        {
            public string Name;
            public string Value;
        }

        public List<Mecro> MecroList { get; set; }
        public Dictionary<string, string> Macro = new Dictionary<string, string>();

        //TODO
        public static Dictionary<string, string> ProjectMacro = new Dictionary<string, string>();

        public string ReplaceMacro(string code)
        {
            StringBuilder sb = new StringBuilder(code);

            if (MecroList != null)
            {
                foreach (var item in MecroList)
                {
                    sb = sb.Replace($"$({item.Name})", item.Value);
                }
            }

            foreach (var item in Macro)
            {
                sb = sb.Replace($"$({item.Key})", item.Value);
            }

            return sb.ToString();
        }

        public abstract string GetCodeString();

        public virtual void Generate(string path, Encoding encoding = null)
        {
            string txt = GetCodeString();

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append($"///********************************************************************************************************************************\n");
            stringBuilder.Append($"///本页代码由代码生成器生成，请勿手动修改。The code on this page is generated by the code generator, do not manually modify.\n");
            stringBuilder.Append($"///生成器类型：$(CodeGenericType)\n");
            stringBuilder.Append($"///配置源文件：$(CodeGenericSourceFilePath)\n");
            stringBuilder.Append($"///********************************************************************************************************************************\n");
            stringBuilder.Append($"\n");
            stringBuilder.Append(txt);
            txt = stringBuilder.ToString();

            txt = ReplaceMacro(txt);

            if (encoding == null)
            {
                encoding = new System.Text.UTF8Encoding(true);
            }

            File.WriteAllText(path, txt, encoding);
        }

        public virtual void GenerateNear(UnityEngine.Object near, string replaceFileName = null, Encoding encoding = null)
        {
            if (!Macro.ContainsKey("ClassName"))
            {
                Macro["ClassName"] = near.name;
            }

            var finfo = near.GetFileInfo();

            Macro["CodeGenericType"] = near.GetType().Name;
            Macro["CodeGenericSourceFilePath"] = finfo.ToString();

            string fileName = $"{near.name}_GenericCode.cs";
            if (!string.IsNullOrEmpty(replaceFileName))
            {
                fileName = $"{replaceFileName}.cs";
            }

            var fn = Path.Combine(finfo.Directory.ToString(), fileName);
            fn = Path.GetFullPath(fn);

            Generate(fn, encoding);
            near.AssetDatabaseRefresh();
        }
    }

    /// <summary>
    /// 代码生成器
    /// </summary>
    public class CSCodeGenerator : CodeGenerator
    {
        public static string GetIndentStr(int level = 1)
        {
            string res = "";
            for (int i = 0; i < level; i++)
            {
                res += "    ";
            }
            return res;
        }

        public int Indent { get; internal set; } = 0;
        public List<string> Lines { get; set; } = new List<string>();

        /// <summary>
        /// 添加一个空行
        /// </summary>
        /// <param name="count"></param>
        public void PushBlankLines(int count = 1)
        {
            for (int i = 0; i < count; i++)
            {
                Push("");
            }
        }

        public void Push(string code)
        {
            if (!string.IsNullOrEmpty(code))
            {
                code = GetIndentStr(Indent) + code;
            }

            Lines.Add(code);
        }

        public void Push(CSCodeGenerator generator)
        {
            foreach (var item in generator.Lines)
            {
                Push(item);
            }
        }

        [Obsolete]
        public void PushSummaryNote(string comment) => PushComment(comment);

        public void PushComment(string comment)
        {
            if (comment == null || comment.Length == 0)
            {
                return;
            }

            if (string.IsNullOrEmpty(comment))
            {
                return;
            }

            //增加注释
            Push("");
            Push(@$"/// <summary>");
            Push(@$"/// {comment}");
            Push(@$"/// </summary>");
        }

        [Obsolete]
        public void PushSummaryNote(params string[] comments) => PushComment(comments);

        public void PushComment(params string[] comments)
        {
            if (comments == null || comments.Length == 0)
            {
                return;
            }

            if (comments.Length == 1 && string.IsNullOrEmpty(comments[0]))
            {
                return;
            }

            //增加注释
            Push("");
            Push(@$"/// <summary>");
            foreach (var item in comments)
            {
                StringReader sr = new StringReader(item);
                string line = null;
                while ((line = sr.ReadLine()) != null)
                {
                    Push(@$"/// <para/> {line}");
                }
            }
            Push(@$"/// </summary>");
        }

        public void BeginScope()
        {
            Push(@$"{{");
            Indent++;
        }

        public void EndScope()
        {
            Indent--;
            Push(@$"}}");
        }

        /// <summary>
        /// 结束一个区域并附带分号
        /// </summary>
        public void EndScopeWithSemicolon()
        {
            Indent--;
            Push(@$"}};");
        }
        public override string GetCodeString()
        {
            string txt = "";
            foreach (var item in Lines)
            {
                txt += item + "\n";
            }

            return txt;
        }

        class Scope : IDisposable
        {
            CSCodeGenerator g;
            public Scope(CSCodeGenerator g)
            {
                this.g = g;
                g.BeginScope();
            }
            public void Dispose()
            {
                g.EndScope();
            }
        }

        /// <summary>
        /// 使用using
        /// </summary>
        /// <returns></returns>
        public IDisposable EnterScope()
        {
            return new Scope(this);
        }

        public IDisposable NewScope
        {
            get
            {
                return new Scope(this);
            }
        }
    }

    /// <summary>
    /// 简单的模板代码生成器。没有循环结构。
    /// </summary>
    public class TemplateCodeGenerator : CodeGenerator
    {
        public TextAsset Template;

        public override string GetCodeString()
        {
            return Template.text;
        }
    }
}


