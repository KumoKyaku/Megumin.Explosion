<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Megumin.Explosion</name>
    </assembly>
    <members>
        <member name="T:ByteArrayExtension_293399541C8D4E38A03A6340FA15498E">
            <summary>
            字节数据扩展
            </summary>
        </member>
        <member name="M:ByteArrayExtension_293399541C8D4E38A03A6340FA15498E.StartWithBOM(System.Byte[])">
            <summary>
            这个数组是不是以BOM头开始的
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ByteArrayExtension_293399541C8D4E38A03A6340FA15498E.SkipBOMIfHave(System.Byte[])">
            <summary>
            如果含有BOM头则去掉，不含有返回原数组
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtension_5191D922C5B740EBB5B4C72E5DA5C11C">
            <summary>
            字典扩展
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Megumin.Class.ExcuteGraph`1" -->
        <member name="M:System.Megumin.Class.SubGraphTemp1.EnterPoint1(System.Threading.CancellationToken)">
            <summary>
            入口没有返回值
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:System.Megumin.Class.SubGraphTemp1.Outpint1">
            <summary>
            出口是可等带的, 等带结果是一个状态码和在图中传递的取消令牌，避免抛出取消异常
            </summary>
        </member>
        <member name="P:System.Megumin.Class.SubGraphTemp1.Outpint2">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Megumin.Class.PlaySongGraph.Outpint1">
            <summary>
            出口是可等带的, 等带结果是一个状态码和在图中传递的取消令牌，避免抛出取消异常
            </summary>
        </member>
        <member name="M:System.Megumin.Class.PlaySongGraph.PLay(System.Threading.CancellationToken)">
            <summary>
            构建一个流程，播放一首音乐，如果成功播放完成一次，结束时等待N秒自动销毁。
            播放其他音乐会打断当前音乐，如果在此播放正在自动销毁的音乐，停止自动销毁，重置倒计时.
            
            为每个节点分配一个位置编号，位置不同，相同的函数成功失败后执行的逻辑可能不同.
            </summary>
        </member>
        <member name="T:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414">
            <summary>
            IPAddressExtension
            </summary>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.GetIntPart(System.Net.IPAddress)">
            <summary>
            取得IP的各个部分
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.GetStringParts(System.Net.IPAddress)">
            <summary>
            取得IP的各个部分
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsA(System.Net.IPAddress)">
            <summary>
            是不是A类地址
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsB(System.Net.IPAddress)">
            <summary>
            是不是B类地址
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsC(System.Net.IPAddress)">
            <summary>
            是不是C类地址
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsD(System.Net.IPAddress)">
            <summary>
            是不是D类地址（多点广播）
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsE(System.Net.IPAddress)">
            <summary>
            是不是E类地址（广播）
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.IsLocalAddress(System.Net.IPAddress)">
            <summary>
            判断地址是不是局域网地址
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddressExtension_A6F086FB3EE3403BB5033720C34DA414.GetIP(System.Boolean)">
            <summary>
            取得IP
            <para>true取得局域网IP，flase取得外网IP，默认值为flase</para>
            </summary>
            <param name="IsLAN">true取得局域网IP，flase取得外网IP，默认值为flase</param>
            <returns></returns>
        </member>
        <member name="T:EnumExtension_5108BEA26E8C44D9A538646E15B6B175">
            <summary>
            对枚举类的扩展
            </summary>
        </member>
        <member name="M:EnumExtension_5108BEA26E8C44D9A538646E15B6B175.CheckFlags``1">
            <summary>
            检查是否有FlagsAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Megumin.AliasAttribute">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Megumin.AliasAttribute.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="T:Megumin.CoolDownTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Megumin.CoolDownTime.CoolDown">
            <summary>
            是否冷却完毕
            </summary>
        </member>
        <member name="M:Megumin.CoolDownTime.op_Implicit(Megumin.CoolDownTime)~System.Boolean">
            <summary>
            是否冷却完毕
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:Megumin.CoolDownTime.Last">
            <summary>
            上次返回冷却完毕的时间
            </summary>
        </member>
        <member name="P:Megumin.CoolDownTime.MinDelta">
            <summary>
            最小间隔
            </summary>
        </member>
        <member name="T:Megumin.InterlockedID`1">
            <summary>
            线程安全ID生成器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Megumin.iint">
            <summary>
            int 最大值最小值表示无穷
            <para/>https://stackoverflow.com/questions/21312081/how-to-represent-integer-infinity
            </summary>
        </member>
        <member name="P:Megumin.iint.IsPositiveInfinity">
            <summary>
            是不是正无穷
            </summary>
        </member>
        <member name="P:Megumin.iint.IsNegativeInfinity">
            <summary>
            是不是负无穷
            </summary>
        </member>
        <member name="F:Megumin.iint.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:Megumin.iint.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="T:Megumin.K2Dictionary`3">
            <summary>
            不是线程安全的
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Megumin.ListPool`1">
            <summary>
            线程安全List池
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>内部使用<see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>实现</remarks>
        </member>
        <member name="P:Megumin.ListPool`1.MaxSize">
            <summary>
            默认容量10
            </summary>
        </member>
        <member name="M:Megumin.ListPool`1.Return(System.Collections.Generic.List{`0}@)">
            <summary>
            调用者需要保证归还后不在使用当前list
            <para/>虽然调用后list被赋值为null，但不能保证没有其他引用指向当前list，尤其小心被保存在Linq语句中的引用。
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:Megumin.MeguminUtility">
            <summary>
            常用工具
            </summary>
        </member>
        <member name="M:Megumin.MeguminUtility.Detail``1(``0)">
            <summary>
            反射出类的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Megumin.MultipleControl`2">
            <summary>
            多重值控制器。
            不提供默认值访问，也不保存默认值。会导致过渡设计。
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <remarks>
            用例：当前声音100，
            A功能需要将声音压低为20，A功能结束后恢复原音量。
            B功能需要将声音改为50，B功能结束后恢复音量。
            <para></para>
            常规做法：A设置20前取得当前音量，结束后设置回去。
            这种做法可能导致B功能开始时取得的当前值是A已经设置的音量20。
            最终结束时B将音量设置为20，导致音量出错。
            <para></para>
            实现思路：
            控制器由值持有者初始化，并将自身和默认设定到控制器中。
            想要控制声音，将一个对象当作key传递给控制器，
            控制器从所有想要控制值的列表中选出想要的值。
            <para></para>
            用例2：多个功能想要黑屏Loading。只要有一个功能还需要Loading，那么Loading就不该消失。
            </remarks>
        </member>
        <member name="F:Megumin.MultipleControl`2.SortLinq">
            <summary>
            排序用Linq表达式
            </summary>
        </member>
        <member name="F:Megumin.MultipleControl`2.OnControlledValue">
            <summary>
            将值设置到目标上
            </summary>
        </member>
        <member name="F:Megumin.MultipleControl`2.DefaultKey">
            <summary>
            默认值Key
            </summary>
        </member>
        <member name="P:Megumin.MultipleControl`2.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:Megumin.MultipleControl`2.#ctor(`0,`1,System.Action{`1})">
            <summary>
            
            </summary>
            <param name="defaultKey">默认key</param>
            <param name="defaultValue">默认值</param>
            <param name="onControlledValue">设置值回调函数</param>
        </member>
        <member name="M:Megumin.MultipleControl`2.InitSortLinq">
            <summary>
            初始化值计算
            </summary>
            <remarks>默认根据值升序</remarks>
        </member>
        <member name="M:Megumin.MultipleControl`2.Control(`0,`1)">
            <summary>
            开始控制
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Megumin.MultipleControl`2.Cancel(`0)">
            <summary>
            取消控制
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Megumin.MultipleControl`2.CancelAll">
            <summary>
            取消除默认值以外的所有控制
            </summary>
        </member>
        <member name="M:Megumin.MultipleControl`2.ApplyValue">
            <summary>
            应用值
            </summary>
        </member>
        <member name="M:Megumin.MultipleControl`2.op_Implicit(Megumin.MultipleControl{`0,`1})~`1">
            <summary>
            返回当前值
            </summary>
            <param name="multipleControl"></param>
        </member>
        <member name="T:Megumin.SimpleMultipleControl`1">
            <inheritdoc/>
        </member>
        <member name="M:Megumin.SimpleMultipleControl`1.#ctor(System.Object,`0,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Megumin.BlackScreenMultipleControl">
             <summary>
             黑屏Loading控制
             </summary>
            <inheritdoc/>
        </member>
        <member name="M:Megumin.BlackScreenMultipleControl.#ctor(System.Object,System.Boolean,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:Megumin.NotInitException">
            <summary>
            未初始化异常
            </summary>
        </member>
        <member name="M:Megumin.Node`1.Pop">
            <summary>
            从原位置摘出来并修复前后链接
            </summary>
        </member>
        <member name="M:Megumin.Node`1.AfterInsert(Megumin.Node{`0})">
            <summary>
            在 this 后面插入 node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Megumin.Node`1.BeforeInsert(Megumin.Node{`0})">
            <summary>
            在 this 前面插入 node
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Megumin.Ring`1">
            <summary>
            双向环
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Megumin.Ring`1.Expand(Megumin.Node{`0},System.Int32,`0)">
            <summary>
            扩容
            </summary>
        </member>
        <member name="T:Megumin.SimpleMatcher">
            <summary>
            简单的匹配器
            </summary>
        </member>
        <member name="T:Megumin.SimplePipeQueue`1">
            <summary>
            异步缓存管道
            <para/>也可以通过（bool isEnd,T value）元组，来实现终止信号
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Megumin.SimplePipeQueueWithEndSignal`1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Megumin.Threshold`1">
            <summary>
            阈
            </summary>
        </member>
        <member name="P:Megumin.Threshold`1.Lower">
            <summary>
            下界
            </summary>
        </member>
        <member name="P:Megumin.Threshold`1.Upper">
            <summary>
            上界
            </summary>
        </member>
        <member name="M:Megumin.Threshold`1.#ctor(`0,`0)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Megumin.Threshold`1.Contain(`0)">
            <summary>
            是不是在界限内
            </summary>
        </member>
        <member name="M:Megumin.Threshold`1.op_LessThan(`0@,Megumin.Threshold{`0}@)">
            <summary>
            是否小于下界
            </summary>
        </member>
        <member name="M:Megumin.Threshold`1.op_GreaterThan(`0@,Megumin.Threshold{`0}@)">
            <summary>
            是否大于上界
            </summary>
        </member>
        <member name="T:Megumin.UtilTime">
            <summary>
            计时（服务器用）
            </summary>
        </member>
        <member name="P:Megumin.UtilTime.DeltaTime">
            <summary>
            上一个时间间隔长度（毫秒）
            </summary>
        </member>
        <member name="P:Megumin.UtilTime.TotalMilliseconds">
            <summary>
            获取以整毫秒数和毫秒的小数部分表示的当前 System.TimeSpan 结构的值。
            </summary>
        </member>
        <member name="M:Megumin.UtilTime.Update">
            <summary>
            更新时间间隔
            </summary>
            <returns></returns>
        </member>
        <member name="T:Megumin.ValueTaskSource">
            <summary>
            失败品，多线程不安全，有逻辑错误
            </summary>
        </member>
        <member name="T:Megumin.ValueTaskSource`1">
            <summary>
            失败品，多线程不安全，有逻辑错误
            </summary>
        </member>
        <member name="M:Megumin.ValueTaskSource`1.EatContinuation(System.Int16)">
            <summary>
            吃掉异步后续，释放关联引用，什么也不会发生。
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Megumin.TempValueTaskSource`1">
            <summary>
            临时使用的IValueTaskSource，线程安全，但是没有性能优化。当作包装类使用。
            <para>没有处理线程同步上下文</para>
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Megumin.TempValueTaskSource`1.Reset">
            <summary>
            清理所有状态，准备重用
            </summary>
        </member>
        <member name="M:Megumin.TempValueTaskSource`1.EatContinuation(System.Int16)">
            <summary>
            吃掉已等待异步后续，释放关联引用，什么也不触发。
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Megumin.TempValueTaskSource">
            <inheritdoc/>
        </member>
        <member name="T:Megumin.OnValueChanged`1">
            <summary>
            当值发生改变时被调用
            <para>因为 new 是关键字，所以参数带有下划线</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="new_">新的值</param>
            <param name="old_">旧的值</param>
        </member>
        <member name="T:Megumin.Axial">
            <summary>
            轴向
            </summary>
        </member>
        <member name="T:Megumin.LeftOrRight">
            <summary>
            左中右
            </summary>
        </member>
        <member name="T:Megumin.URDL">
            <summary>
            顺时针 上右下左
            </summary>
        </member>
        <member name="T:Megumin.Sudoku">
            <summary>
            九宫格 顺时针布局
            <para> 7 0 1 </para>
            <para> 6 8 2 </para>
            <para> 5 4 3 </para>
            </summary>
        </member>
        <member name="T:Megumin.KeypadSudoku">
            <summary>
            九宫格 小键盘布局
            <para> 7 8 9 </para>
            <para> 4 5 6 </para>
            <para> 1 2 3 </para>
            </summary>
        </member>
        <member name="F:Megumin.KeypadSudoku.NegativeCenter">
            <summary>
            负中心，没什么实际意义，因为 第0位 空着，所以当作填充用。
            </summary>
        </member>
        <member name="T:Megumin.LineMode">
            <summary>
            联机模式/网络可连接状态
            </summary>
            <![CDATA[
            if(CurrentLineMode > LineMode.LAN)
            {
                //当前有公网连接
            }
            ]]>
        </member>
        <member name="F:Megumin.LineMode.Offline">
            <summary>
            离线/无网络连接
            </summary>
        </member>
        <member name="F:Megumin.LineMode.Single">
            <summary>
            单机模式/与本机可连接
            </summary>
        </member>
        <member name="F:Megumin.LineMode.LAN">
            <summary>
            局域网/局域网内可连接
            </summary>
        </member>
        <member name="F:Megumin.LineMode.Online">
            <summary>
            在线/可与公网连接
            </summary>
        </member>
        <member name="T:Megumin.PluginState">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="F:Megumin.PluginState.Null">
            <summary>
            插件为空
            </summary>
        </member>
        <member name="F:Megumin.PluginState.Initing">
            <summary>
            正在初始化
            </summary>
        </member>
        <member name="F:Megumin.PluginState.InitErrorAndStop">
            <summary>
            初始化失败已停止工作
            </summary>
        </member>
        <member name="F:Megumin.PluginState.ReIniting">
            <summary>
            重新初始化
            </summary>
        </member>
        <member name="F:Megumin.PluginState.InitFinish">
            <summary>
            初始化完成
            </summary>
        </member>
        <member name="F:Megumin.PluginState.Open">
            <summary>
            开启
            </summary>
        </member>
        <member name="F:Megumin.PluginState.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="F:Megumin.PluginState.Dispose">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:Megumin.ISamplable">
            <summary>
            可采样的
            </summary>
        </member>
        <member name="T:Megumin.ISamplable`1">
            <summary>
            可采样的
            </summary>
        </member>
        <member name="T:Megumin.IEvaluable">
            <summary>
            可估值的
            </summary>
        </member>
        <member name="M:Megumin.IEvaluable.Evaluate">
            <summary>
            求解
            </summary>
        </member>
        <member name="T:Megumin.ICalculable">
            <summary>
            可计算的/可求值的
            </summary>
        </member>
        <member name="T:Megumin.ICalculable`1">
            <summary>
            可计算的/可求值的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Megumin.IMessageBox">
            <summary>
            返回值约定[0：取消;1：确定；2：帮助；]
            </summary>
        </member>
        <member name="T:Megumin.IMessageBox.MessageBoxButtons">
            <summary>
            参考 https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.messageboxbuttons?view=net-5.0
            </summary>
        </member>
        <member name="M:Megumin.IMessageBox.Show(System.Object,System.Object,Megumin.IMessageBox.MessageBoxButtons,System.Object)">
            <summary>
            对话框通用api
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <param name="buttons"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Megumin.IMatcher`2" -->
        <member name="T:Megumin.IPath">
            <summary>
            路径
            </summary>
        </member>
        <member name="T:Megumin.INode">
            <summary>
            节点
            </summary>
        </member>
        <member name="T:Megumin.INode`1">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:Megumin.ISlot">
            <summary>
            插槽
            </summary>
        </member>
        <member name="T:Megumin.ISlot`2">
            <summary>
            插槽
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:Megumin.IVisible">
            <summary>
            含有可见性的
            </summary>
        </member>
        <member name="P:Megumin.IVisible.Visible">
            <summary>
            可见等级
            </summary>
        </member>
        <member name="T:Megumin.IVersionable">
            <summary>
            含有版本的
            </summary>
        </member>
        <member name="P:Megumin.IVersionable.Version">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="T:Megumin.IPipeQueue`1">
            <summary>
            管道队列，用于处理生产者已经产出，消费者还没有就绪的情况
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Megumin.IPipeQueue`1.ReadAsync">
            <summary>
            当队列中有元素时返回。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Megumin.IXYZ`1">
            <summary>
            
            </summary>
            <remarks>不要重写比较方法</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:StringExtension_E68DD56066C94F2286AF4BD18126A406">
            <summary>
            string扩展
            </summary>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.Split(System.String,System.Int32,System.Boolean)">
            <summary>
            按指定长度分割字符串
            </summary>
            <param name="s"></param>
            <param name="perLength">每段长度</param>
            <param name="allowLastOneShortCount">是够允许最后一段长度小于每段长度，
            如果为false，不足的末尾将被舍弃。默认为false。</param>
            <returns></returns>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.ToInt(System.String)">
            <summary>
            使用int.Parse转换一个字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.ToEnum``1(System.String)">
            <summary>
            将一个字符串转换成枚举
            </summary>
            <typeparam name="T">提供一个枚举类型</typeparam>
            <param name="value"></param>
            <returns>返回对应的枚举值</returns>
            <exception cref="T:System.ArgumentException">所给泛型不是枚举</exception>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.ToBool(System.String)">
            <summary>
            将string转换成bool。
            <para>当值为"true""TRUE""True"之一时返回true，否则返回false。</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.IsDigit(System.Char,System.Int32,System.Int32@)">
            <summary>
            https://source.dot.net/#System.Private.CoreLib/ParseNumbers.cs,634
            </summary>
            <param name="c"></param>
            <param name="radix"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.ReplaceFileName(System.String,System.String)">
            <summary>
            安全替换路径中的文件名，会检测是否已经存在。
            </summary>
            <param name="path"></param>
            <param name="newFileName"></param>
            <returns></returns>
        </member>
        <member name="M:StringExtension_E68DD56066C94F2286AF4BD18126A406.CreateFileName(System.String,System.String,System.String)">
            <summary>
            fileName 如果存在，自增
            </summary>
            <param name="dir"></param>
            <param name="fileName"></param>
            <param name="ex">需要前面有 . </param>
            <returns></returns>
        </member>
        <member name="T:StructExtension_28FDB7156FD24F39B5EA39D95892E328">
            <summary>
            值扩展
            </summary>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.Clamp``1(``0@,``0@,``0@)">
            <summary>
            将值限定在指定范围内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cur"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.ClampIn``1(``0@,``0@,``0@)">
            <summary>
            将值限定在指定范围内,不知道两个边界谁大谁小，消息比<see cref="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.Clamp``1(``0@,``0@,``0@)"/>低一些。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cur"></param>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.SnapCeil(System.Int32@,System.Double)">
            <summary>
            
            </summary>
            <param name="orignal"></param>
            <param name="multiple">倍数</param>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.SnapFloor(System.Int32@,System.Double)">
            <summary>
            
            </summary>
            <param name="orignal"></param>
            <param name="multiple">倍数</param>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.SnapCeil(System.Double@,System.Double)">
            <summary>
            
            </summary>
            <param name="orignal"></param>
            <param name="multiple">倍数</param>
        </member>
        <member name="M:StructExtension_28FDB7156FD24F39B5EA39D95892E328.SnapFloor(System.Double@,System.Double)">
            <summary>
            
            </summary>
            <param name="orignal"></param>
            <param name="multiple">倍数</param>
        </member>
        <member name="M:TypeExtension_7AE0B2E4B4124A53AE87CE8D95431431.FirstAttribute``1(System.Type)">
            <summary>
            尝试取得第一个指定属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
